@page "/Cpr"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using TestOgSikkerhed.Data

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ToDoDbContext DbContext

@inject HashingUtility HashingUtility


<h3>Validate CPR NR</h3>

@if (!isLoading)
{
    <p>User: @userName</p>
    if (userCpr == null)
    {
        <p>CPR number:</p>
        <EditForm Model="cprInput" OnValidSubmit="SubmitCpr">
            <DataAnnotationsValidator />
            <div class="form-group">
                <InputText @bind-Value="cprInput.CprNumber" class="form-control" required />
                <ValidationMessage For="@(() => cprInput.CprNumber)" />
            </div>
            <br />
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    }
    else
    {
        <p>CPR number:</p>
        <EditForm Model="verificationInput" OnValidSubmit="VerifyCpr">
            <DataAnnotationsValidator />
            <div class="form-group">
                <InputText @bind-Value="verificationInput.CprNumber" class="form-control" required />
                <ValidationMessage For="@(() => verificationInput.CprNumber)" />
            </div>
            @if (!string.IsNullOrEmpty(verificationError))
            {
                <p class="text-danger">@verificationError</p>
            }
            <br />
            <button type="submit" class="btn btn-success">Verify</button>
        </EditForm>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private string? userCpr;

    private string? userSalt;
    private string? userName;
    private bool isLoading = true;
    private string? verificationError;

    private CprInputModel cprInput = new();
    private VerificationInputModel verificationInput = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                // Check if CPR is registered
                var cprEntry = DbContext.CprRecords.FirstOrDefault(c => c.User == appUser.UserName);
                if (cprEntry != null)
                {
                    userCpr = cprEntry.CprNumber;
                    userSalt = cprEntry.Salt;
                    userName = appUser.UserName;
                }
            }
        }

        isLoading = false;
    }



    private async Task SubmitCpr()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                string sanitizedCpr = new string(cprInput.CprNumber.Where(char.IsDigit).ToArray());

                if (sanitizedCpr.Length != 10)
                {
                    return;
                }

                // Generer salt og hash CPR
                byte[] salt = HashingUtility.GenerateSalt();
                string hashedCpr = HashingUtility.ComputePBKDF2(sanitizedCpr, salt);
                string saltBase64 = Convert.ToBase64String(salt);

                // Gem i databasen
                Data.Cpr newCpr = new() { User = appUser.UserName!, CprNumber = hashedCpr, Salt = saltBase64 };
                DbContext.CprRecords.Add(newCpr);
                await DbContext.SaveChangesAsync();

                userCpr = hashedCpr;
                userSalt = saltBase64;

                // // Save CPR to database
                // Data.Cpr newCpr = new() { User = appUser.UserName!, CprNumber = sanitizedCpr };
                // DbContext.CprRecords.Add(newCpr);
                // await DbContext.SaveChangesAsync();

                // // Reload page state
                // userCpr = sanitizedCpr;

            }
        }
    }

    private void VerifyCpr()
    {
        string sanitizedInput = new string(verificationInput.CprNumber.Where(char.IsDigit).ToArray());

        if (!string.IsNullOrEmpty(userCpr) && !string.IsNullOrEmpty(userSalt))
        {
            byte[] saltBytes = Convert.FromBase64String(userSalt);
            string hashedInput = HashingUtility.ComputePBKDF2(sanitizedInput, saltBytes);

            if (hashedInput == userCpr)
            {
                verificationError = null;
                NavigationManager.NavigateTo("/todo", forceLoad: true);
            }
            else
            {
                verificationError = "Incorrect CPR number. Please try again.";
                verificationInput.CprNumber = "";
            }
        }
        else
        {
            verificationError = "Salt";
            verificationInput.CprNumber = "";
        }
    }

    public class CprInputModel
    {
        [Required]
        [RegularExpression(@"^\d{6}-?\d{4}$", ErrorMessage = "CPR must be in format XXXXXX-XXXX or XXXXXXXXXX.")]
        public string CprNumber { get; set; } = "";
    }

    public class VerificationInputModel
    {
        [Required]
        [RegularExpression(@"^\d{6}-?\d{4}$", ErrorMessage = "CPR must be in format XXXXXX-XXXX or XXXXXXXXXX.")]
        public string CprNumber { get; set; } = "";
    }
}
