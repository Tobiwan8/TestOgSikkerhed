@page "/ToDo"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@using TestOgSikkerhed.Data

@inject UserManager<ApplicationUser> UserManager
@inject ToDoDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject HashingUtility HashingUtility


<h3>To-Do List</h3>

<EditForm Model="newToDoItem" OnValidSubmit="AddToDo">
    <DataAnnotationsValidator />
    <div class="form-group">
        <InputText @bind-Value="newToDoItem.ItemText" class="form-control" placeholder="Enter a new task..." />
        <ValidationMessage For="@(() => newToDoItem.ItemText)" />
    </div>
    <button type="submit" class="btn btn-primary mt-2">Add</button>
</EditForm>

<hr />

@if (toDoList.Any())
{
    <ul class="list-group">
        @foreach (var todo in toDoList)
        {
            <li class="list-group-item">@DecryptText(todo.Item)</li>
        }
    </ul>
}
else
{
    <p>No tasks yet. Add a new one above!</p>
}

@code {
    private List<Data.ToDo> toDoList = new();
    private ToDoInputModel newToDoItem = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(5);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                int userId = DbContext.CprRecords.FirstOrDefault(c => c.User == appUser.UserName)?.Id ?? 0;
                toDoList = DbContext.ToDoItems.Where(t => t.UserID == userId).ToList();
            }
        }

        // if (user.Identity?.IsAuthenticated == true)
        // {
        //     var appUser = await UserManager.GetUserAsync(user);
        //     if (appUser != null)
        //     {
        //         int userId = DbContext.CprRecords.FirstOrDefault(c => c.User == appUser.UserName)?.Id ?? 0;

        //         if (userId > 0)
        //         {
        //             var client = HttpClientFactory.CreateClient("TestOgSikkerhed.EncryptionAPI");
        //             var privateKeyResponse = Backend.KeyManager.GetPrivateKey();

        //             toDoList = DbContext.ToDoItems.Where(t => t.UserID == userId).ToList();

        //             foreach (var item in toDoList)
        //             {
        //                 var decryptionRequest = new
        //                 {
        //                     PrivateKey = privateKeyResponse,
        //                     EncryptedText = item.Item
        //                 };

        //                 var response = await client.PostAsJsonAsync("decrypt", decryptionRequest);
        //                 if (response.IsSuccessStatusCode)
        //                 {
        //                     item.Item = await response.Content.ReadAsStringAsync();
        //                 }
        //             }
        //         }
        //     }
        // }
    }

    private async Task AddToDo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                int userId = DbContext.CprRecords.FirstOrDefault(c => c.User == appUser.UserName)?.Id ?? 0;

                if (userId > 0 && !string.IsNullOrWhiteSpace(newToDoItem.ItemText))
                {
                    // Hent PublicKey fra API
                    var client = HttpClientFactory.CreateClient("TestOgSikkerhed.EncryptionAPI");
                    var publicKeyResponse = await client.GetStringAsync("getPublicKey");

                    if (!string.IsNullOrEmpty(publicKeyResponse))
                    {
                        var encryptionRequest = new
                        {
                            PublicKey = publicKeyResponse,
                            PlainText = newToDoItem.ItemText
                        };

                        // Send tekst til API for kryptering
                        var response = await client.PostAsJsonAsync("encrypt", encryptionRequest);
                        if (response.IsSuccessStatusCode)
                        {
                            string encryptedText = await response.Content.ReadAsStringAsync();

                            Data.ToDo newToDoTask = new()
                                {
                                    UserID = userId,
                                    Item = encryptedText
                                };

                            DbContext.ToDoItems.Add(newToDoTask);
                            await DbContext.SaveChangesAsync();

                            toDoList.Add(newToDoTask);
                            newToDoItem.ItemText = ""; // Ryd inputfeltet
                        }
                    }

                    // Data.ToDo newTask = new() { UserID = userId, Item = newToDoItem.ItemText };
                    // DbContext.ToDoItems.Add(newTask);
                    // await DbContext.SaveChangesAsync();

                    // toDoList.Add(newTask); // Update the UI
                    // newToDoItem.ItemText = ""; // Clear input field
                }
            }
        }
    }

    private string DecryptText(string encryptedText)
    {
        try
        {
            string privateKey = KeyManager.GetPrivateKey(); // Hent private key fra fil
            using RSA rsa = RSA.Create();
            rsa.ImportPkcs8PrivateKey(Convert.FromBase64String(privateKey), out _);

            byte[] encryptedBytes = Convert.FromBase64String(encryptedText);
            byte[] decryptedBytes = rsa.Decrypt(encryptedBytes, RSAEncryptionPadding.OaepSHA256);

            return Encoding.UTF8.GetString(decryptedBytes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved dekryptering: {ex.Message}");
            return "Fejl";
        }
    }

    public class ToDoInputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "Task must be between 1 and 100 characters.", MinimumLength = 1)]
        public string ItemText { get; set; } = "";
    }
}
